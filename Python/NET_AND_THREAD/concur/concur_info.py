"""
	
	Конкуренция
	 Можно почитать про стандартную библиотеку: (http://bit.ly/concur-lib)

	 Работая с компьютером, ожидания связаны с:
	 	- Ограничением ввода-вывода (Проц бысрее, чем ОЗУ, а ОЗУ бытсрее, чем диски)
	 	- Ограничением процессора. (При выполнении большого кол-ва задач)

	 Методы выполнения задач:
	 	Синхронный
	 	Асинхронный


	 Чтобы увеличить скорость решения задачи, логичным будет:
	 	- Распараллелить задачу на несколько ПРОЦЕССОВ

	 При этом возникают узкие места - элемент управления и общий канакл передачи.
	 		Методы устранения таких проблем:
	 			- Очереди (FIFO) - Важно, чтобы скорость каждого элемента была одинаковой, чтобы никто не тормозил очередь.
	 					- Процессы (proc_dishes.py)
	 					- Потоки (thread_dishes.py), 	Отличие от процессов: поток нельзя остановить (без проблем) -> Опасны 
	 																				Безопасны для глобальных данных.
	 																				Как исползовать: установить программную блоеировку перед изм переменной в потоке.
						Рекомендации:
						+ Используем потоки для задач, связанных с ограничениями ввода-вывода
						+ Используем процессы, сетевые вычисления или события для задач, связанных с ограничением процессора.

			Процессы и потоки лежат в основе работы веб-сервера Apache


		Альтернатива Процессно-поточному подходу является программирование на основе СОБЫТИЙ.
			На основе событий, к примеру, работает nginx и он быстрее Apache 

"""

"""

		Очереди
		
			Создать очередь можно списокм Redis

			Так же основанные на Python пакеты работы с очередями:
				- Celery (Умеет выполнять распределенные задачи как синхронно, так и асинхронно)
				- thoonk (Поволяет исп очереди задач и механизмы публикации подписки. Основан на Redis)
				- rq     (Библиотека очередей задач, основана на Redis)
				- Queues (Сайт, созданный для дисуссии о ПО для создания очередей как на Python, так и ином)

"""

	