"""
	
		ZeroMQ 

		Сервер ZeroMQ обрабатывает запросы синхронно по 1 за раз, но не сбрасывает жидающие запросы:
		(Queue - очередь, Message - сообщений, Zero - посредники в работе не нужны)

		Подробная информация: http://zguide.zeromq.org/
		Книга-руководство: ZeroMQ: messaging for Many Applecations 

		Установка:
				pip install pyzmq

		Библиотека ZeroMQ, включает в себя сокеты с расширенными возможностями:
				- Обмен сообщениями происходит целиком
				- Выполняются повторные соединения при обрыве
				- Выполняется буфферизация данных, когда отправитьельи получатель не синхронизированы.


				Типы сокетов ZeroMQ:
					REQ - СИНХРОННЫЙ ЗАПРОС
					REP - СИНХРОННЫЙ ответ
					DEALER - асинхронный запрос
					ROUTER - асинхронный ответ
					PUB - публикация
					SUB - подписка
					PUSH - разветвление на выходе
					PULL - разветвление на входе

			Файлы:
					zmq_client.py
					zmq_server.py

					Если попытаться запустить 2 одинаковых сервера, то комп будет ругаться на то, что используются одинаковые сокеты.
					Данные (строки) для пересылки кодируются в тип byte, по прибитии декодируются.
					Если нужно отправлять дргуие типы данных, следут посмотреть на библиотеку MessagePack(http://msgpack.org/) 

			Несмотря на то, что ZeroMQ не предоставляет промежуточных участников, их можно создать,
			для этого слеует использовать сокеты: DEALER, ROUTER:
					1) Несколько сокетов REQ подключаются к одному ROUTER (Шардируются), 
					2) ROUTER передает каждый запрос к DEALER (Адаптер), 
					3) DEALER связывает с подключенным к нему сокетом REP (Шардируются)

					За всем этим следит ZeroMQ, чтобы все работало

			Так же приемуществом ZeroMQ является масштабируемость:
					- tcp - соединение между процессами на 1 или нескольких машинах
					- ipc - соединение между процессами на одной машине
					- inproc - соединени между потоками одного процесса (передача данных между потоками БЕЗ БЛОКИРОВОК)
"""			