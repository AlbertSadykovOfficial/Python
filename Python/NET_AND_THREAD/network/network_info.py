"""
	
		Сети

		Модель публикации-подписки:
				Широковещательная система при которой один или более процессов публикует сообщения.
				Каждый подписчик указывает, сообщения какого типа он хочет получать.

				Быстро создатьсистему pub-sub можно на основе Redis и ZeroMQ:
					Публикатор создает тему сообщения (Запускается после того, как будут слушать подписчики)
					Подписчики указывают какие темы они хотят получать. 

					Сообщение остается на сервере, пока все подписчики не получат его

				Другие инструменты дляя организации побликации-подпискаи:
						- RabbitMQ
						- pypi.python.org
						- Pubsubhubbup



		TCP\IP
				Более подробная информация: Python socket programming HOWTO (http://bit.ly/socket-howto)
				
				UDP (User Datagram Protocol) - протокол передачи без подтверждения получения (отправил: дойдет, не дойдет его проблемы)
				TCP (Transmission Control Protocol) - протокол передачи с уставновление соединения (Делает так, чтобы данные дошли до получателя)
				
				Библиотеки работы с сокетами:
					 - ZeroMQ (см. соответсвующий каталог)
					 - ActiveMQ (поддержка Apache) - (https://acivemq.apache.org/)
					 - RabbitMQ (http://bit.ly/rabbimq-tut)


		Scapy 

				Библиотека для анализа сети (пакетов).
				Явл небольшим языком программирования.
				Ресурс: http://bit.ly/scapy-docs http://bit.ly/scapy-install


		Интернет-службы 

				(Автоматизация наиболее популярных интернет служб)

				DNS (Domain Name System)
						import socket
						socket.gethostbyname('www.google.com') # Узнать IP
						socket.gethostbyname_ex('www.google.com') # Имя, альтернативные имена, список адресов

						socket.getaddrinfo('www.google.com', 80) # Ищет IP (для UDP и TCP)
						socket.getaddrinfo('www.google.com', 80, socket.AF_INET, socket.SOCK_STREAM) # TCP

						socket.getservbyname('http') 
						socket.getservbyport(80)

				Email
						Стандартные модули (http://bit.ly/py-email, http://bit.ly/py-smtpd):
								- smtplib (Для отправки по SMTP)
								- email   (сОЗДАНИЕ И АНАЛИЗ СООБЩЕНИЙ)
								- poplib  (Чтение POP3)
								- imaplib (Чтение IMAP)

						SMTP-сервер на чистом Python Lamson (http://lamsonproject.org/)

				Другие протоколы:
						FTP : ftplib (http://bit.ly/py-ftplib)


		Веб-службы и API

				Данные можно получать с сайта краулингом(парсингом) общей веб-страницы,
				а можно через RESTful API в формате JSON, XML...

				Некоторые ресурсы для доступа к свои RESTful API требуют токены доступа, 
				чтобы удостоверить личность, ограничивать действия и тд...


		Удаленная обработка

				Удаленные вызовы поцедур (RMC)
						Выглядят как обычные ф-ции, но выполняются на удаленных машинах всей сети.
						Клиенты обращаются к серверу и вызывают одну из его ф-ций с помщью RPC.

						Стандартная библиотека (xmlrpc) использует только обмен xml.
						Мы определяем ф-ции на сервере, а клиент вызывае их так, словно они импортированы:
							xmlrpc_server.py
							xmlrpc_client.py


				fabric

						Пакет позволяет запусктаь удаленные и локальные команды, загружать, скачивать файлы,
						рабоать от лица sudo.
						Пакет использует Secure Shall, чтобы запускать программы

						Суть: пишем ф-ции на python в файле 'fabric' (указываем в нем удаленные машины и ф-ции которые нажуо исп)

						Установка:
							pip install fabric

						Работа:
								Локально:
									1) Создадим fab1.py
									2) Заупустить: fab -f fab1.py -H 127.0.0.1 iso

								Удаленно:
									1) Запускаем SSH сервер 
									2) 
											fab3.py : run() - удаленный двойник ф-ции local()
											fab4.py : Чтобы вводить пароль из скрипта исп env (но лучше работать с отк/закр ключами ssh)


				
				salt

						Платформа управления системами, основанная на ZeroMQ (еше не портирована на Python 3)
						
						Альтернатива:
							- ansible(Связан с Python)
							- puppet (Связан с Ruby)
							- chef 	 (Связан с Ruby)

					

"""