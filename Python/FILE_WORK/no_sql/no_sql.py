"""

	Хранилище данных NoSQL

	Некоторые БД не явл реляционными и не поддерживают SQL.
	Они были созданы для работы с очень крупными наборам данных, позволяют более гибко определть данные
	и поддерживают пользовательские операции с даннымию

	NoSQl - Раньше: не SQL, Сейчас: не только SQL

	NoSQL серверы, которые могут работать с данными, объем которых превышает объем доступной памяти (для распределеннх систем)
		-Cassandra 
		-MongoDB
		-HBase

	Full-Text Databases
		БД полнотекстового поиска, индексируют все:
			-Lucene
			-ElasticSearch
			-Xapian
			-Whoosh

"""

"""

	Семейство dbm (хранилища: ключ-значение -> похожа на словарь)

	Часто встраивают в браузеры, чтобы поддерживать рзличные настройки.

		Параметры open:
			+Имя файла
			+Параметр 2:
					+ r - чтение
					+ w - запись
					+ c - чтение + запись

	Ключ и значения сохраняются как байты, мы не можнм итерировать по объектам, но можем полчить количество.

"""

	import dbm

	db = dbm.open('defenitions', 'c')
	db['mustard'] = 'yellow'
	db['ketchup'] = 'red'
	db['pesto'] = 'green'

	db['mustard'] #b'yellow' 


"""

		Memcached 

		Быстрый сервер кэширования, распологающийся в Опепративной памяти и работающий по принципу (ключ-->значение).

		Часто его размещают перед БД и он может использоваться для хранения данных сессии веб-сервера.

		Для его использования следует:
			1) Установить сервер на компьютер (Linux,Mac: http://bit.ly/install-osx Win: http://bit.ly/memcache-win)
			2) Скачать модуль Python (pip install python-memcached)
			3) Подключить модуль

		Возможнотсти:
			1) Устанавливаь и получать значения ключей
			2) Увеличичвать и уменьшать значения 
			3) Удалять ключи

"""

	import memcache
	db = memcache.Client(['127.0.0.1:11211'])
	db.set('marco', 'polo')
	db.get('marco')
	db.set('ducks', 0)
	db.incr('ducks', 2)
	db.get('ducks')