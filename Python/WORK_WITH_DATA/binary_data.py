"""

	Бинарные данные
	
	Битовые операторы

	& - И
	| - ИЛИ
	^ - Исключающее ИЛИ
	~ - Инверсия битов
	<< -Сдвиг влево (аналогичен умноэению на 2)
	>> -Сдвиг вправо (аналогичен делению на 2)
	
"""

"""
	bytes и bytearray

		bites - неизменяем как кортеж байтов
		bitearray - изменяем как список

"""

		blist = [1,2,3 255]
		
		the_bytes = bytes(blist)
		the_byte_array = bytearray(blist)

		the_bytes
		the_byte_array

		# Проверка на изменение:
			the_bytes[1] = 127 # Ошибка
			the_byte_array [1] = 127

		the_bytes = bytes(range(1, 256))
		the_byte_array = bytearray(range(0, 256))



"""

		Преобразоваие бинарных данных с помощью struct

		Спецификаторы порядка байтов:
			< - Прямой порядок
			> - Обратный порядок

		Спецификаторы формата:
		x - пропустить байт
		b - знаковый байт
		B - Беззнаковый байт
		h - знаковое короткое целое число (2 байта)
		H - Беззнаковое короткое целое число (2 байта)
		i - Знаковое целое число (4 байта)
		I - Беззнаковое целое число (4 байта)
		l - Знаковое длинное целое число (4 байта)
		L - Беззнаковое длинное целое число (4 байта)
		Q - Беззнаковое очень длинное целое число (8 байт)
		f - число с плавающе точкой (4 байта)
		d - Число с плавающей точкой двойной точности (8 байт)
		p - счетчик и символы (1 + count байт)
		s - Символы (count байт)

		2L === LL
"""
		import struct
		valid_png_header = b'\x89PNG\r\n\x1an' # заголовок PNG
		data = 'Первые 30 БАЙТ PNG'  # Первые 30 БАЙТ PNG

		if data[:8] == valid_png_header:
			# width: 16-20 байт, height: 21-24 байт; | > - обратный порядок байтов; | L - четырехбайтное целое число.
				width, height = struct.unpack('>LL', data[16:24]) 
				print('Width = ', width, ' Height = ', height)
		else:
				print('Not a valid PNG')

		#  Запаковать число обратно:
			struct.pack('>L', 154) # т.к число вмещается в 255, то первые 3 айта будут \x00

		# Другой вариант получения ширины и высоты 
		# (пропустить 16 первых(16x), далее 2 по 4 (2L) и пропустить поседние 6(6x) из 30):
			width, height = struct.unpack('>16x2L6x', data)

"""

	Преобразование байтов/строк  (binascii())

""" 
		
		import binascii
		valid_png_header = b'\x89PNG\r\n\x1an'
		print(binascii.hexlify(valid_png_header))
		print(binascii.hexlify(b'89504e470d0a1a0a'))